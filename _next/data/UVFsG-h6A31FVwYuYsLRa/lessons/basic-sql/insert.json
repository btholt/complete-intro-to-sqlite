{"pageProps":{"post":{"attributes":{"title":"INSERT"},"html":"<p>We&#39;ve seen how to read from tables using SELECT. Let&#39;s see how to insert new data into tables using INSERT.</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> Artist (name) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;Radiohead&#x27;</span>);\n<span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> Artist <span class=\"hljs-keyword\">WHERE</span> name <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;Radiohead&#x27;</span>;\n</code></pre><p>This inserts a new artist into the Artist table. That table will have one column in it, <code>name</code> and that value is going to be <code>&#39;Radiohead&#39;</code> (notice single quotes again.) Notice we did not give it an ArtistId. That ID is autogenerated by SQLite for us and is guaranteed unique. If you had multiple columns, you would just make sure it&#39;s the same order on both sides</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-comment\">-- Not a valid query for our database, just to show you</span>\n<span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> food (name, food_group, color) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;carrot&#x27;</span>, <span class=\"hljs-string\">&#x27;vegetable&#x27;</span>, <span class=\"hljs-string\">&#x27;orange&#x27;</span>); <span class=\"hljs-comment\">-- notice the order is the same</span>\n</code></pre><p>Also, note that here you could use double quotes (though I typically won&#39;t.)</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> &quot;Artist&quot; (&quot;name&quot;) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;Radiohead&#x27;</span>);\n</code></pre><h2>UPDATE</h2>\n<p>Let&#39;s say you didn&#39;t intend to insert the band Radiohead but instead wanted to insert Daft Punk. You could do this.</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">UPDATE</span> Artist <span class=\"hljs-keyword\">SET</span> name <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;Daft Punk&#x27;</span> <span class=\"hljs-keyword\">WHERE</span> name <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;Radiohead&#x27;</span>;\n<span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> Artist <span class=\"hljs-keyword\">WHERE</span> name <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;Daft Punk&#x27;</span>;\n</code></pre><p>Notice the IDs are the same. You also could have selected by the ArtistId instead of the name (and probably would have been a safer practice.)</p>\n<blockquote>\n<p>We&#39;ll talk about how to upsert in a bit. We need to talk about table constraint before we talk about upserts. Just wanted you to know I&#39;m not leaving it out as I knew some of you would be wondering!</p>\n</blockquote>\n<h2>RETURNING</h2>\n<p>One more update, let&#39;s change it to a different French techno group</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">UPDATE</span> Artist <span class=\"hljs-keyword\">SET</span> name <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;Justice&#x27;</span> <span class=\"hljs-keyword\">WHERE</span> name <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;Daft Punk&#x27;</span> RETURNING <span class=\"hljs-operator\">*</span>;\n</code></pre><p>The returning allows you to SELECT the rows you&#39;re updating so you can see what changed.</p>\n<h2>DELETE</h2>\n<p>Very similar to UPDATEs. RETURNING also works here if you want to see what gets deleted.</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">DELETE</span> <span class=\"hljs-keyword\">FROM</span> Artist <span class=\"hljs-keyword\">WHERE</span> name <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;Justice&#x27;</span>; <span class=\"hljs-comment\">-- Feel free to put RETURNING * at the end</span>\n</code></pre>","markdown":"\nWe've seen how to read from tables using SELECT. Let's see how to insert new data into tables using INSERT.\n\n```sql\nINSERT INTO Artist (name) VALUES ('Radiohead');\nSELECT * from Artist WHERE name = 'Radiohead';\n```\n\nThis inserts a new artist into the Artist table. That table will have one column in it, `name` and that value is going to be `'Radiohead'` (notice single quotes again.) Notice we did not give it an ArtistId. That ID is autogenerated by SQLite for us and is guaranteed unique. If you had multiple columns, you would just make sure it's the same order on both sides\n\n```sql\n-- Not a valid query for our database, just to show you\nINSERT INTO food (name, food_group, color) VALUES ('carrot', 'vegetable', 'orange'); -- notice the order is the same\n```\n\nAlso, note that here you could use double quotes (though I typically won't.)\n\n```sql\nINSERT INTO \"Artist\" (\"name\") VALUES ('Radiohead');\n```\n\n## UPDATE\n\nLet's say you didn't intend to insert the band Radiohead but instead wanted to insert Daft Punk. You could do this.\n\n```sql\nUPDATE Artist SET name = 'Daft Punk' WHERE name = 'Radiohead';\nSELECT * from Artist WHERE name = 'Daft Punk';\n```\n\nNotice the IDs are the same. You also could have selected by the ArtistId instead of the name (and probably would have been a safer practice.)\n\n> We'll talk about how to upsert in a bit. We need to talk about table constraint before we talk about upserts. Just wanted you to know I'm not leaving it out as I knew some of you would be wondering!\n\n## RETURNING\n\nOne more update, let's change it to a different French techno group\n\n```sql\nUPDATE Artist SET name = 'Justice' WHERE name = 'Daft Punk' RETURNING *;\n```\n\nThe returning allows you to SELECT the rows you're updating so you can see what changed.\n\n## DELETE\n\nVery similar to UPDATEs. RETURNING also works here if you want to see what gets deleted.\n\n```sql\nDELETE FROM Artist WHERE name = 'Justice'; -- Feel free to put RETURNING * at the end\n```\n","slug":"insert","title":"INSERT","section":"Basic SQL","icon":"database","filePath":"/home/runner/work/complete-intro-to-sqlite/complete-intro-to-sqlite/lessons/03-basic-sql/B-insert.md","nextSlug":"/lessons/basic-sql/tables","prevSlug":"/lessons/basic-sql/select"}},"__N_SSG":true}