{"pageProps":{"post":{"attributes":{},"html":"<p>Let&#39;s create our first table, the <code>BandMember</code> table.</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> BandMember (\n  id <span class=\"hljs-type\">INTEGER</span> <span class=\"hljs-keyword\">PRIMARY</span> KEY,\n  name TEXT <span class=\"hljs-keyword\">UNIQUE</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,\n  role TEXT <span class=\"hljs-type\">VARCHAR</span>\n);\n</code></pre><blockquote>\n<p>SQLite has only four real data types: INTEGER, REAL, TEXT, and BLOB. It is a dynamically typed system. Therefore you can give datatypes like TINYINT but SQLite will just treat it like an INTEGER and likewise you can give a type of VARCHAR(255) but it will just treat it like TEXT (and therefore won&#39;t truncate it.) <a href=\"https://www.sqlite.org/datatype3.html\">See more here</a>.</p>\n</blockquote>\n<p>To see the table you created, run <code>.schema BandMember</code> in your psql instance to see it and the sequence that you created. The sequence stores the <code>id</code> counter.</p>\n<p>We now have a table. A table is the actual repository of data. Think of a database like a folder and a table like a spreadsheet. You can have many spreadsheets in a folder. Same with tables.</p>\n<p>We now have a table, BandMember. Our table has two fields in it, an incrementing ID and a string that is the the name of the BandMember. You can think of fields like columns in a spreadsheet.</p>\n<p>A table contains records. A record can be thought of as a row in a spreadsheet. Every time we insert a new record into a table, we&#39;re adding another row to our spreadsheet.</p>\n<blockquote>\n<p>The spreadsheet analogy isn&#39;t just theoretical. <a href=\"https://www.npmjs.com/package/google-spreadsheet\">You can essentially use Google Sheets as a database</a> (appropriate for small, infrequent use.)</p>\n</blockquote>\n<p>Let&#39;s add a record to our table.</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> BandMember (name, role) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;Thom Yorke&#x27;</span>, <span class=\"hljs-string\">&#x27;singer&#x27;</span>) RETURNING <span class=\"hljs-operator\">*</span>;\n</code></pre><p>This adds one row with the name of Thom Yorke and the role of singer. Where is the id? Since we made it <code>PRIMARY KEY</code> it gets created automatically. Since this is the first item in our database, its ID will be <code>1</code>. As you have likely guessed already, the next item in the table will be <code>2</code>.</p>\n<p>Let&#39;s see the record.</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> BandMember;\n</code></pre><p>You should see something like</p>\n<pre><code class=\"hljs language-plaintext\">1|Thom Yorke|singer\n</code></pre><p>Amazing! We now have a table with a record in it.</p>\n<p>Let&#39;s add multiple.</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span>\n    BandMember\n    (name, role)\n<span class=\"hljs-keyword\">VALUES</span>\n    (<span class=\"hljs-string\">&#x27;Jonny Greenwood&#x27;</span>, <span class=\"hljs-string\">&#x27;guitarist&#x27;</span>),\n    (<span class=\"hljs-string\">&#x27;Colin Greenwood&#x27;</span>, <span class=\"hljs-string\">&#x27;bassist&#x27;</span>),\n    (<span class=\"hljs-string\">&#x27;Ed O&#x27;&#x27;Brien&#x27;</span>, <span class=\"hljs-string\">&#x27;guitarist&#x27;</span>),\n    (<span class=\"hljs-string\">&#x27;Philip Selway&#x27;</span>, <span class=\"hljs-string\">&#x27;drummer&#x27;</span>)\nRETURNING <span class=\"hljs-operator\">*</span>;\n</code></pre><p>You can add multiple add a time as long as you comma separate them.</p>\n<h2>ALTER TABLE</h2>\n<p>Okay so now we have a table again. What happens if we want to add a third field to our table? Let&#39;s add an <code>image</code> field that will point to a URL of an image of the person.</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> BandMember <span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">COLUMN</span> image TEXT;\n</code></pre><p>Likewise we can drop it too:</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> BandMember <span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">COLUMN</span> image;\n</code></pre><p>There are a lot of ways to alter a table. You can make it UNIQUE like we did or NOT NULL. You can also change the data type. For now, let&#39;s add back our extra column.</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> BandMember\n<span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">COLUMN</span> nationality TEXT <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-string\">&#x27;UK&#x27;</span>;\n</code></pre><p>Specifying a DEFAULT when using a NOT NULL constraint will prevent errors if the column has existing null values. In this case, we&#39;re saying &quot;add a new non-null column, and for those that exist give them the value of &#39;UK&#39;.&quot;</p>\n<blockquote>\n<p>SQLite does not allow you to do multiple alterations in one statement. If you want to add multiple columns, you have to do multiple alter tables commands.</p>\n</blockquote>\n<h2>Dropping a table</h2>\n<p>What if we messed up and we didn&#39;t want an BandMember table?</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> BandMember;\n</code></pre><p>Pretty simple, right? That&#39;s it! Do be careful with this command. Like <code>rm</code> in bash, it&#39;s not one you can recover from. Once a table is dropped, it is dropped.</p>\n","markdown":"Let's create our first table, the `BandMember` table.\n\n```sql\nCREATE TABLE BandMember (\n  id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE NOT NULL,\n  role TEXT VARCHAR\n);\n```\n\n> SQLite has only four real data types: INTEGER, REAL, TEXT, and BLOB. It is a dynamically typed system. Therefore you can give datatypes like TINYINT but SQLite will just treat it like an INTEGER and likewise you can give a type of VARCHAR(255) but it will just treat it like TEXT (and therefore won't truncate it.) [See more here][types].\n\nTo see the table you created, run `.schema BandMember` in your psql instance to see it and the sequence that you created. The sequence stores the `id` counter.\n\nWe now have a table. A table is the actual repository of data. Think of a database like a folder and a table like a spreadsheet. You can have many spreadsheets in a folder. Same with tables.\n\nWe now have a table, BandMember. Our table has two fields in it, an incrementing ID and a string that is the the name of the BandMember. You can think of fields like columns in a spreadsheet.\n\nA table contains records. A record can be thought of as a row in a spreadsheet. Every time we insert a new record into a table, we're adding another row to our spreadsheet.\n\n> The spreadsheet analogy isn't just theoretical. [You can essentially use Google Sheets as a database][sheets] (appropriate for small, infrequent use.)\n\nLet's add a record to our table.\n\n```sql\nINSERT INTO BandMember (name, role) VALUES ('Thom Yorke', 'singer') RETURNING *;\n```\n\nThis adds one row with the name of Thom Yorke and the role of singer. Where is the id? Since we made it `PRIMARY KEY` it gets created automatically. Since this is the first item in our database, its ID will be `1`. As you have likely guessed already, the next item in the table will be `2`.\n\nLet's see the record.\n\n```sql\nSELECT * FROM BandMember;\n```\n\nYou should see something like\n\n```plaintext\n1|Thom Yorke|singer\n```\n\nAmazing! We now have a table with a record in it.\n\nLet's add multiple.\n\n```sql\nINSERT INTO\n    BandMember\n    (name, role)\nVALUES\n    ('Jonny Greenwood', 'guitarist'),\n    ('Colin Greenwood', 'bassist'),\n    ('Ed O''Brien', 'guitarist'),\n    ('Philip Selway', 'drummer')\nRETURNING *;\n```\n\nYou can add multiple add a time as long as you comma separate them.\n\n## ALTER TABLE\n\nOkay so now we have a table again. What happens if we want to add a third field to our table? Let's add an `image` field that will point to a URL of an image of the person.\n\n```sql\nALTER TABLE BandMember ADD COLUMN image TEXT;\n```\n\nLikewise we can drop it too:\n\n```sql\nALTER TABLE BandMember DROP COLUMN image;\n```\n\nThere are a lot of ways to alter a table. You can make it UNIQUE like we did or NOT NULL. You can also change the data type. For now, let's add back our extra column.\n\n```sql\nALTER TABLE BandMember\nADD COLUMN nationality TEXT NOT NULL DEFAULT 'UK';\n```\n\nSpecifying a DEFAULT when using a NOT NULL constraint will prevent errors if the column has existing null values. In this case, we're saying \"add a new non-null column, and for those that exist give them the value of 'UK'.\"\n\n> SQLite does not allow you to do multiple alterations in one statement. If you want to add multiple columns, you have to do multiple alter tables commands.\n\n## Dropping a table\n\nWhat if we messed up and we didn't want an BandMember table?\n\n```sql\nDROP TABLE BandMember;\n```\n\nPretty simple, right? That's it! Do be careful with this command. Like `rm` in bash, it's not one you can recover from. Once a table is dropped, it is dropped.\n\n[sheets]: https://www.npmjs.com/package/google-spreadsheet\n[types]: https://www.sqlite.org/datatype3.html\n","slug":"tables","title":"Tables","section":"Basic SQL","icon":"database","filePath":"/home/runner/work/complete-intro-to-sqlite/complete-intro-to-sqlite/lessons/03-basic-sql/C-tables.md","nextSlug":"/lessons/intermediate-sql/relational-data","prevSlug":"/lessons/basic-sql/insert"}},"__N_SSG":true}