{"pageProps":{"post":{"attributes":{"title":"jsonb"},"html":"<p>So we&#39;ve been doing everything with the JSON functions but in reality we really want to use JSONB. It&#39;s a more compact way to represent JSON and it&#39;s faster to use. It makes everything a little harder to read but otherwise is just better.</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-comment\">-- notice the b in jsonb</span>\n<span class=\"hljs-keyword\">SELECT</span> jsonb(<span class=\"hljs-string\">&#x27;{&quot;username&quot;: &quot;btholt&quot;, &quot;favorites&quot;:[&quot;Daft Punk&quot;, &quot;Radiohead&quot;]}&#x27;</span>);\n<span class=\"hljs-comment\">-- ?1?usernamegbtholt?favorites??Daft Punk?Radiohead</span>\n</code></pre><p>It comes out a little hard to read but ultimately we don&#39;t want to read it until it&#39;s out of the database so I&#39;d suggest always using JSONB.</p>\n<p>Given that, let&#39;s make a table, insert some stuff into it, and write some queries.</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> users (email, data);\n\n<span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span>\n  users\n  (email, data)\n<span class=\"hljs-keyword\">VALUES</span>\n  (<span class=\"hljs-string\">&#x27;brian@example.com&#x27;</span>, jsonb(<span class=\"hljs-string\">&#x27;{&quot;favorites&quot;:[&quot;Daft Punk&quot;, &quot;Radiohead&quot;], &quot;name&quot;: {&quot;first&quot;: &quot;Brian&quot;, &quot;last&quot;: &quot;Holt&quot;}}&#x27;</span>)),\n  (<span class=\"hljs-string\">&#x27;bob@example.com&#x27;</span>, jsonb(<span class=\"hljs-string\">&#x27;{&quot;favorites&quot;:[&quot;Daft Punk&quot;], &quot;name&quot;: {&quot;first&quot;: &quot;Bob&quot;, &quot;last&quot;: &quot;Smith&quot;}}&#x27;</span>)),\n  (<span class=\"hljs-string\">&#x27;alice@example.com&#x27;</span>, jsonb(<span class=\"hljs-string\">&#x27;{&quot;admin&quot;: true, &quot;favorites&quot;:[&quot;The Beatles&quot;, &quot;Queen&quot;], &quot;name&quot;: {&quot;first&quot;: &quot;Alice&quot;, &quot;last&quot;: &quot;Johnson&quot;}}&#x27;</span>)),\n  (<span class=\"hljs-string\">&#x27;charlie@example.com&#x27;</span>, jsonb(<span class=\"hljs-string\">&#x27;{&quot;favorites&quot;:[&quot;Nirvana&quot;, &quot;Pearl Jam&quot;], &quot;name&quot;: {&quot;first&quot;: &quot;Charlie&quot;, &quot;last&quot;: &quot;Brown&quot;}}&#x27;</span>)),\n  (<span class=\"hljs-string\">&#x27;dave@example.com&#x27;</span>, jsonb(<span class=\"hljs-string\">&#x27;{&quot;favorites&quot;:[&quot;Pink Floyd&quot;, &quot;Led Zeppelin&quot;], &quot;name&quot;: {&quot;first&quot;: &quot;Dave&quot;, &quot;last&quot;: &quot;Wilson&quot;}}&#x27;</span>)),\n  (<span class=\"hljs-string\">&#x27;eve@example.com&#x27;</span>, jsonb(<span class=\"hljs-string\">&#x27;{&quot;favorites&quot;:[&quot;Madonna&quot;, &quot;Michael Jackson&quot;], &quot;name&quot;: {&quot;first&quot;: &quot;Eve&quot;, &quot;last&quot;: &quot;Davis&quot;}}&#x27;</span>)),\n  (<span class=\"hljs-string\">&#x27;frank@example.com&#x27;</span>, jsonb(<span class=\"hljs-string\">&#x27;{&quot;favorites&quot;:[&quot;Queen&quot;, &quot;David Bowie&quot;], &quot;name&quot;: {&quot;first&quot;: &quot;Frank&quot;, &quot;last&quot;: &quot;Miller&quot;}}&#x27;</span>)),\n  (<span class=\"hljs-string\">&#x27;grace@example.com&#x27;</span>, jsonb(<span class=\"hljs-string\">&#x27;{&quot;favorites&quot;:[&quot;Radiohead&quot;, &quot;Led Zeppelin&quot;], &quot;name&quot;: {&quot;first&quot;: &quot;Grace&quot;, &quot;last&quot;: &quot;Lee&quot;}}&#x27;</span>)),\n  (<span class=\"hljs-string\">&#x27;hank@example.com&#x27;</span>, jsonb(<span class=\"hljs-string\">&#x27;{&quot;favorites&quot;:[&quot;U2&quot;, &quot;Radiohead&quot;], &quot;name&quot;: {&quot;first&quot;: &quot;Hank&quot;, &quot;last&quot;: &quot;Taylor&quot;}}&#x27;</span>)),\n  (<span class=\"hljs-string\">&#x27;ivy@example.com&#x27;</span>, jsonb(<span class=\"hljs-string\">&#x27;{&quot;favorites&quot;:[&quot;Adele&quot;, &quot;Beyoncé&quot;], &quot;name&quot;: {&quot;first&quot;: &quot;Ivy&quot;, &quot;last&quot;: &quot;Anderson&quot;}}&#x27;</span>)),\n  (<span class=\"hljs-string\">&#x27;jack@example.com&#x27;</span>, jsonb(<span class=\"hljs-string\">&#x27;{&quot;favorites&quot;:[&quot;Radiohead&quot;, &quot;Muse&quot;], &quot;name&quot;: {&quot;first&quot;: &quot;Jack&quot;, &quot;last&quot;: &quot;Thomas&quot;}}&#x27;</span>)),\n  (<span class=\"hljs-string\">&#x27;kate@example.com&#x27;</span>, jsonb(<span class=\"hljs-string\">&#x27;{&quot;favorites&quot;:[&quot;Taylor Swift&quot;, &quot;Madonna&quot;], &quot;name&quot;: {&quot;first&quot;: &quot;Kate&quot;, &quot;last&quot;: &quot;Martinez&quot;}}&#x27;</span>)),\n  (<span class=\"hljs-string\">&#x27;leo@example.com&#x27;</span>, jsonb(<span class=\"hljs-string\">&#x27;{&quot;favorites&quot;:[&quot;Nirvana&quot;, &quot;Daft Punk&quot;], &quot;name&quot;: {&quot;first&quot;: &quot;Leo&quot;, &quot;last&quot;: &quot;Garcia&quot;}}&#x27;</span>));\n\n<span class=\"hljs-comment\">-- it&#x27;s readable but hard to. **never** modify this directly, always let SQLite do it</span>\n<span class=\"hljs-keyword\">SELECT</span> data <span class=\"hljs-keyword\">from</span> users;\n\n<span class=\"hljs-comment\">-- get nested data</span>\n<span class=\"hljs-keyword\">SELECT</span> data <span class=\"hljs-operator\">-</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-string\">&#x27;name&#x27;</span> <span class=\"hljs-operator\">-</span><span class=\"hljs-operator\">&gt;&gt;</span> <span class=\"hljs-string\">&#x27;first&#x27;</span>, data <span class=\"hljs-operator\">-</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-string\">&#x27;name&#x27;</span> <span class=\"hljs-operator\">-</span><span class=\"hljs-operator\">&gt;&gt;</span> <span class=\"hljs-string\">&#x27;last&#x27;</span> <span class=\"hljs-keyword\">FROM</span> users;\n\n<span class=\"hljs-keyword\">SELECT</span> data <span class=\"hljs-operator\">-</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-string\">&#x27;name&#x27;</span> <span class=\"hljs-operator\">-</span><span class=\"hljs-operator\">&gt;&gt;</span> <span class=\"hljs-string\">&#x27;first&#x27;</span>, data <span class=\"hljs-operator\">-</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-string\">&#x27;name&#x27;</span> <span class=\"hljs-operator\">-</span><span class=\"hljs-operator\">&gt;&gt;</span> <span class=\"hljs-string\">&#x27;last&#x27;</span> <span class=\"hljs-keyword\">FROM</span> users <span class=\"hljs-keyword\">WHERE</span> json_array_length(data, <span class=\"hljs-string\">&#x27;$.favorites&#x27;</span>) <span class=\"hljs-operator\">&lt;</span> <span class=\"hljs-number\">2</span>;\n</code></pre><p>Pretty straightforward here. Getting data out of JSON is very similar to just normal fields.</p>\n<p>For the second one, we are asking for all users that have less than two favorites. You can use these functions anywhere.</p>\n","markdown":"\nSo we've been doing everything with the JSON functions but in reality we really want to use JSONB. It's a more compact way to represent JSON and it's faster to use. It makes everything a little harder to read but otherwise is just better.\n\n```sql\n-- notice the b in jsonb\nSELECT jsonb('{\"username\": \"btholt\", \"favorites\":[\"Daft Punk\", \"Radiohead\"]}');\n-- ?1?usernamegbtholt?favorites??Daft Punk?Radiohead\n```\n\nIt comes out a little hard to read but ultimately we don't want to read it until it's out of the database so I'd suggest always using JSONB.\n\nGiven that, let's make a table, insert some stuff into it, and write some queries.\n\n```sql\nCREATE TABLE users (email, data);\n\nINSERT INTO\n  users\n  (email, data)\nVALUES\n  ('brian@example.com', jsonb('{\"favorites\":[\"Daft Punk\", \"Radiohead\"], \"name\": {\"first\": \"Brian\", \"last\": \"Holt\"}}')),\n  ('bob@example.com', jsonb('{\"favorites\":[\"Daft Punk\"], \"name\": {\"first\": \"Bob\", \"last\": \"Smith\"}}')),\n  ('alice@example.com', jsonb('{\"admin\": true, \"favorites\":[\"The Beatles\", \"Queen\"], \"name\": {\"first\": \"Alice\", \"last\": \"Johnson\"}}')),\n  ('charlie@example.com', jsonb('{\"favorites\":[\"Nirvana\", \"Pearl Jam\"], \"name\": {\"first\": \"Charlie\", \"last\": \"Brown\"}}')),\n  ('dave@example.com', jsonb('{\"favorites\":[\"Pink Floyd\", \"Led Zeppelin\"], \"name\": {\"first\": \"Dave\", \"last\": \"Wilson\"}}')),\n  ('eve@example.com', jsonb('{\"favorites\":[\"Madonna\", \"Michael Jackson\"], \"name\": {\"first\": \"Eve\", \"last\": \"Davis\"}}')),\n  ('frank@example.com', jsonb('{\"favorites\":[\"Queen\", \"David Bowie\"], \"name\": {\"first\": \"Frank\", \"last\": \"Miller\"}}')),\n  ('grace@example.com', jsonb('{\"favorites\":[\"Radiohead\", \"Led Zeppelin\"], \"name\": {\"first\": \"Grace\", \"last\": \"Lee\"}}')),\n  ('hank@example.com', jsonb('{\"favorites\":[\"U2\", \"Radiohead\"], \"name\": {\"first\": \"Hank\", \"last\": \"Taylor\"}}')),\n  ('ivy@example.com', jsonb('{\"favorites\":[\"Adele\", \"Beyoncé\"], \"name\": {\"first\": \"Ivy\", \"last\": \"Anderson\"}}')),\n  ('jack@example.com', jsonb('{\"favorites\":[\"Radiohead\", \"Muse\"], \"name\": {\"first\": \"Jack\", \"last\": \"Thomas\"}}')),\n  ('kate@example.com', jsonb('{\"favorites\":[\"Taylor Swift\", \"Madonna\"], \"name\": {\"first\": \"Kate\", \"last\": \"Martinez\"}}')),\n  ('leo@example.com', jsonb('{\"favorites\":[\"Nirvana\", \"Daft Punk\"], \"name\": {\"first\": \"Leo\", \"last\": \"Garcia\"}}'));\n\n-- it's readable but hard to. **never** modify this directly, always let SQLite do it\nSELECT data from users;\n\n-- get nested data\nSELECT data -> 'name' ->> 'first', data -> 'name' ->> 'last' FROM users;\n\nSELECT data -> 'name' ->> 'first', data -> 'name' ->> 'last' FROM users WHERE json_array_length(data, '$.favorites') < 2;\n```\n\nPretty straightforward here. Getting data out of JSON is very similar to just normal fields.\n\nFor the second one, we are asking for all users that have less than two favorites. You can use these functions anywhere.\n","slug":"jsonb","title":"jsonb","section":"JSON","icon":"file-code","filePath":"/home/runner/work/complete-intro-to-sqlite/complete-intro-to-sqlite/lessons/08-json/C-jsonb.md","nextSlug":"/lessons/json/more-advance-queries","prevSlug":"/lessons/json/querying"}},"__N_SSG":true}